<?php
/**
 * Flag
 *
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Model;

use \ArrayAccess;
/**
 * Flag Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DBCDK\CommunityServices
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Flag implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'timeFlagged' => '\DateTime',
        'description' => 'string',
        'markedAsRead' => 'bool',
        'id' => 'double',
        'ownerId' => 'double',
        'comments' => '\DBCDK\CommunityServices\Model\Comment',
        'posts' => '\DBCDK\CommunityServices\Model\Post',
        'groups' => '\DBCDK\CommunityServices\Model\Group',
        'groupFlagsId' => 'double',
        'postFlagsId' => 'double',
        'commentFlagsId' => 'double',
        'reviewFlagsId' => 'double',
        'reviews' => '\DBCDK\CommunityServices\Model\Review'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'timeFlagged' => 'timeFlagged',
        'description' => 'description',
        'markedAsRead' => 'markedAsRead',
        'id' => 'id',
        'ownerId' => 'ownerId',
        'comments' => '_comments',
        'posts' => '_posts',
        'groups' => '_groups',
        'groupFlagsId' => 'groupFlagsId',
        'postFlagsId' => 'postFlagsId',
        'commentFlagsId' => 'commentFlagsId',
        'reviewFlagsId' => 'reviewFlagsId',
        'reviews' => '_reviews'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'timeFlagged' => 'setTimeFlagged',
        'description' => 'setDescription',
        'markedAsRead' => 'setMarkedAsRead',
        'id' => 'setId',
        'ownerId' => 'setOwnerId',
        'comments' => 'setComments',
        'posts' => 'setPosts',
        'groups' => 'setGroups',
        'groupFlagsId' => 'setGroupFlagsId',
        'postFlagsId' => 'setPostFlagsId',
        'commentFlagsId' => 'setCommentFlagsId',
        'reviewFlagsId' => 'setReviewFlagsId',
        'reviews' => 'setReviews'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'timeFlagged' => 'getTimeFlagged',
        'description' => 'getDescription',
        'markedAsRead' => 'getMarkedAsRead',
        'id' => 'getId',
        'ownerId' => 'getOwnerId',
        'comments' => 'getComments',
        'posts' => 'getPosts',
        'groups' => 'getGroups',
        'groupFlagsId' => 'getGroupFlagsId',
        'postFlagsId' => 'getPostFlagsId',
        'commentFlagsId' => 'getCommentFlagsId',
        'reviewFlagsId' => 'getReviewFlagsId',
        'reviews' => 'getReviews'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $timeFlagged 
      * @var \DateTime
      */
    protected $timeFlagged;
    
    /**
      * $description 
      * @var string
      */
    protected $description;
    
    /**
      * $markedAsRead 
      * @var bool
      */
    protected $markedAsRead;
    
    /**
      * $id 
      * @var double
      */
    protected $id;
    
    /**
      * $ownerId 
      * @var double
      */
    protected $ownerId;
    
    /**
      * $comments 
      * @var \DBCDK\CommunityServices\Model\Comment
      */
    protected $comments;
    
    /**
      * $posts 
      * @var \DBCDK\CommunityServices\Model\Post
      */
    protected $posts;
    
    /**
      * $groups 
      * @var \DBCDK\CommunityServices\Model\Group
      */
    protected $groups;
    
    /**
      * $groupFlagsId 
      * @var double
      */
    protected $groupFlagsId;
    
    /**
      * $postFlagsId 
      * @var double
      */
    protected $postFlagsId;
    
    /**
      * $commentFlagsId 
      * @var double
      */
    protected $commentFlagsId;
    
    /**
      * $reviewFlagsId 
      * @var double
      */
    protected $reviewFlagsId;
    
    /**
      * $reviews 
      * @var \DBCDK\CommunityServices\Model\Review
      */
    protected $reviews;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->timeFlagged = $data["timeFlagged"];
            $this->description = $data["description"];
            $this->markedAsRead = $data["markedAsRead"];
            $this->id = $data["id"];
            $this->ownerId = $data["ownerId"];
            $this->comments = $data["comments"];
            $this->posts = $data["posts"];
            $this->groups = $data["groups"];
            $this->groupFlagsId = $data["groupFlagsId"];
            $this->postFlagsId = $data["postFlagsId"];
            $this->commentFlagsId = $data["commentFlagsId"];
            $this->reviewFlagsId = $data["reviewFlagsId"];
            $this->reviews = $data["reviews"];
        }
    }
    
    /**
     * Gets timeFlagged
     * @return \DateTime
     */
    public function getTimeFlagged()
    {
        return $this->timeFlagged;
    }
  
    /**
     * Sets timeFlagged
     * @param \DateTime $timeFlagged 
     * @return $this
     */
    public function setTimeFlagged($timeFlagged)
    {
        
        $this->timeFlagged = $timeFlagged;
        return $this;
    }
    
    /**
     * Gets description
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }
  
    /**
     * Sets description
     * @param string $description 
     * @return $this
     */
    public function setDescription($description)
    {
        
        $this->description = $description;
        return $this;
    }
    
    /**
     * Gets markedAsRead
     * @return bool
     */
    public function getMarkedAsRead()
    {
        return $this->markedAsRead;
    }
  
    /**
     * Sets markedAsRead
     * @param bool $markedAsRead 
     * @return $this
     */
    public function setMarkedAsRead($markedAsRead)
    {
        
        $this->markedAsRead = $markedAsRead;
        return $this;
    }
    
    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param double $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets ownerId
     * @return double
     */
    public function getOwnerId()
    {
        return $this->ownerId;
    }
  
    /**
     * Sets ownerId
     * @param double $ownerId 
     * @return $this
     */
    public function setOwnerId($ownerId)
    {
        
        $this->ownerId = $ownerId;
        return $this;
    }
    
    /**
     * Gets comments
     * @return \DBCDK\CommunityServices\Model\Comment
     */
    public function getComments()
    {
        return $this->comments;
    }
  
    /**
     * Sets comments
     * @param \DBCDK\CommunityServices\Model\Comment $comments 
     * @return $this
     */
    public function setComments($comments)
    {
        
        $this->comments = $comments;
        return $this;
    }
    
    /**
     * Gets posts
     * @return \DBCDK\CommunityServices\Model\Post
     */
    public function getPosts()
    {
        return $this->posts;
    }
  
    /**
     * Sets posts
     * @param \DBCDK\CommunityServices\Model\Post $posts 
     * @return $this
     */
    public function setPosts($posts)
    {
        
        $this->posts = $posts;
        return $this;
    }
    
    /**
     * Gets groups
     * @return \DBCDK\CommunityServices\Model\Group
     */
    public function getGroups()
    {
        return $this->groups;
    }
  
    /**
     * Sets groups
     * @param \DBCDK\CommunityServices\Model\Group $groups 
     * @return $this
     */
    public function setGroups($groups)
    {
        
        $this->groups = $groups;
        return $this;
    }
    
    /**
     * Gets groupFlagsId
     * @return double
     */
    public function getGroupFlagsId()
    {
        return $this->groupFlagsId;
    }
  
    /**
     * Sets groupFlagsId
     * @param double $groupFlagsId 
     * @return $this
     */
    public function setGroupFlagsId($groupFlagsId)
    {
        
        $this->groupFlagsId = $groupFlagsId;
        return $this;
    }
    
    /**
     * Gets postFlagsId
     * @return double
     */
    public function getPostFlagsId()
    {
        return $this->postFlagsId;
    }
  
    /**
     * Sets postFlagsId
     * @param double $postFlagsId 
     * @return $this
     */
    public function setPostFlagsId($postFlagsId)
    {
        
        $this->postFlagsId = $postFlagsId;
        return $this;
    }
    
    /**
     * Gets commentFlagsId
     * @return double
     */
    public function getCommentFlagsId()
    {
        return $this->commentFlagsId;
    }
  
    /**
     * Sets commentFlagsId
     * @param double $commentFlagsId 
     * @return $this
     */
    public function setCommentFlagsId($commentFlagsId)
    {
        
        $this->commentFlagsId = $commentFlagsId;
        return $this;
    }
    
    /**
     * Gets reviewFlagsId
     * @return double
     */
    public function getReviewFlagsId()
    {
        return $this->reviewFlagsId;
    }
  
    /**
     * Sets reviewFlagsId
     * @param double $reviewFlagsId 
     * @return $this
     */
    public function setReviewFlagsId($reviewFlagsId)
    {
        
        $this->reviewFlagsId = $reviewFlagsId;
        return $this;
    }
    
    /**
     * Gets reviews
     * @return \DBCDK\CommunityServices\Model\Review
     */
    public function getReviews()
    {
        return $this->reviews;
    }
  
    /**
     * Sets reviews
     * @param \DBCDK\CommunityServices\Model\Review $reviews 
     * @return $this
     */
    public function setReviews($reviews)
    {
        
        $this->reviews = $reviews;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
