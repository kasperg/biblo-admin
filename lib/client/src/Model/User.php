<?php
/**
 * User
 *
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Model;

use \ArrayAccess;
/**
 * User Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DBCDK\CommunityServices
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class User implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'realm' => 'string',
        'username' => 'string',
        'credentials' => 'object',
        'challenges' => 'object',
        'email' => 'string',
        'emailVerified' => 'bool',
        'status' => 'string',
        'created' => '\DateTime',
        'lastUpdated' => '\DateTime',
        'id' => 'double'
    );
  
    static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'realm' => 'realm',
        'username' => 'username',
        'credentials' => 'credentials',
        'challenges' => 'challenges',
        'email' => 'email',
        'emailVerified' => 'emailVerified',
        'status' => 'status',
        'created' => 'created',
        'lastUpdated' => 'lastUpdated',
        'id' => 'id'
    );
  
    static function attributeMap() {
        return self::$attributeMap;
    }

    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'realm' => 'setRealm',
        'username' => 'setUsername',
        'credentials' => 'setCredentials',
        'challenges' => 'setChallenges',
        'email' => 'setEmail',
        'emailVerified' => 'setEmailVerified',
        'status' => 'setStatus',
        'created' => 'setCreated',
        'lastUpdated' => 'setLastUpdated',
        'id' => 'setId'
    );
  
    static function setters() {
        return self::$setters;
    }

    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'realm' => 'getRealm',
        'username' => 'getUsername',
        'credentials' => 'getCredentials',
        'challenges' => 'getChallenges',
        'email' => 'getEmail',
        'emailVerified' => 'getEmailVerified',
        'status' => 'getStatus',
        'created' => 'getCreated',
        'lastUpdated' => 'getLastUpdated',
        'id' => 'getId'
    );
  
    static function getters() {
        return self::$getters;
    }

    
    /**
      * $realm 
      * @var string
      */
    protected $realm;
    
    /**
      * $username 
      * @var string
      */
    protected $username;
    
    /**
      * $credentials 
      * @var object
      */
    protected $credentials;
    
    /**
      * $challenges 
      * @var object
      */
    protected $challenges;
    
    /**
      * $email 
      * @var string
      */
    protected $email;
    
    /**
      * $emailVerified 
      * @var bool
      */
    protected $emailVerified;
    
    /**
      * $status 
      * @var string
      */
    protected $status;
    
    /**
      * $created 
      * @var \DateTime
      */
    protected $created;
    
    /**
      * $lastUpdated 
      * @var \DateTime
      */
    protected $lastUpdated;
    
    /**
      * $id 
      * @var double
      */
    protected $id;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        
        if ($data != null) {
            $this->realm = $data["realm"];
            $this->username = $data["username"];
            $this->credentials = $data["credentials"];
            $this->challenges = $data["challenges"];
            $this->email = $data["email"];
            $this->emailVerified = $data["emailVerified"];
            $this->status = $data["status"];
            $this->created = $data["created"];
            $this->lastUpdated = $data["lastUpdated"];
            $this->id = $data["id"];
        }
    }
    
    /**
     * Gets realm
     * @return string
     */
    public function getRealm()
    {
        return $this->realm;
    }
  
    /**
     * Sets realm
     * @param string $realm 
     * @return $this
     */
    public function setRealm($realm)
    {
        
        $this->realm = $realm;
        return $this;
    }
    
    /**
     * Gets username
     * @return string
     */
    public function getUsername()
    {
        return $this->username;
    }
  
    /**
     * Sets username
     * @param string $username 
     * @return $this
     */
    public function setUsername($username)
    {
        
        $this->username = $username;
        return $this;
    }
    
    /**
     * Gets credentials
     * @return object
     */
    public function getCredentials()
    {
        return $this->credentials;
    }
  
    /**
     * Sets credentials
     * @param object $credentials 
     * @return $this
     */
    public function setCredentials($credentials)
    {
        
        $this->credentials = $credentials;
        return $this;
    }
    
    /**
     * Gets challenges
     * @return object
     */
    public function getChallenges()
    {
        return $this->challenges;
    }
  
    /**
     * Sets challenges
     * @param object $challenges 
     * @return $this
     */
    public function setChallenges($challenges)
    {
        
        $this->challenges = $challenges;
        return $this;
    }
    
    /**
     * Gets email
     * @return string
     */
    public function getEmail()
    {
        return $this->email;
    }
  
    /**
     * Sets email
     * @param string $email 
     * @return $this
     */
    public function setEmail($email)
    {
        
        $this->email = $email;
        return $this;
    }
    
    /**
     * Gets emailVerified
     * @return bool
     */
    public function getEmailVerified()
    {
        return $this->emailVerified;
    }
  
    /**
     * Sets emailVerified
     * @param bool $emailVerified 
     * @return $this
     */
    public function setEmailVerified($emailVerified)
    {
        
        $this->emailVerified = $emailVerified;
        return $this;
    }
    
    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }
  
    /**
     * Sets status
     * @param string $status 
     * @return $this
     */
    public function setStatus($status)
    {
        
        $this->status = $status;
        return $this;
    }
    
    /**
     * Gets created
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->created;
    }
  
    /**
     * Sets created
     * @param \DateTime $created 
     * @return $this
     */
    public function setCreated($created)
    {
        
        $this->created = $created;
        return $this;
    }
    
    /**
     * Gets lastUpdated
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->lastUpdated;
    }
  
    /**
     * Sets lastUpdated
     * @param \DateTime $lastUpdated 
     * @return $this
     */
    public function setLastUpdated($lastUpdated)
    {
        
        $this->lastUpdated = $lastUpdated;
        return $this;
    }
    
    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param double $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
