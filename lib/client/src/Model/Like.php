<?php
/**
 * Like
 *
 * PHP version 5
 *
 * @category Class
 * @package  DBCDK\CommunityServices
 * @author   http://github.com/swagger-api/swagger-codegen
 * @license  http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link     https://github.com/swagger-api/swagger-codegen
 */
/**
 *  Copyright 2016 SmartBear Software
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DBCDK\CommunityServices\Model;

use \ArrayAccess;
/**
 * Like Class Doc Comment
 *
 * @category    Class
 * @description 
 * @package     DBCDK\CommunityServices
 * @author      http://github.com/swagger-api/swagger-codegen
 * @license     http://www.apache.org/licenses/LICENSE-2.0 Apache Licene v2
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Like implements ArrayAccess
{
    /**
      * Array of property to type mappings. Used for (de)serialization 
      * @var string[]
      */
    static $swaggerTypes = array(
        'itemId' => 'string',
        'value' => 'string',
        'id' => 'double',
        'profileId' => 'double',
        'likeid' => 'double',
        'reviewlikeid' => 'double'
    );
  
    /** 
      * Array of attributes where the key is the local name, and the value is the original name
      * @var string[] 
      */
    static $attributeMap = array(
        'itemId' => 'item_id',
        'value' => 'value',
        'id' => 'id',
        'profileId' => 'profileId',
        'likeid' => 'likeid',
        'reviewlikeid' => 'reviewlikeid'
    );
  
    /**
      * Array of attributes to setter functions (for deserialization of responses)
      * @var string[]
      */
    static $setters = array(
        'itemId' => 'setItemId',
        'value' => 'setValue',
        'id' => 'setId',
        'profileId' => 'setProfileId',
        'likeid' => 'setLikeid',
        'reviewlikeid' => 'setReviewlikeid'
    );
  
    /**
      * Array of attributes to getter functions (for serialization of requests)
      * @var string[]
      */
    static $getters = array(
        'itemId' => 'getItemId',
        'value' => 'getValue',
        'id' => 'getId',
        'profileId' => 'getProfileId',
        'likeid' => 'getLikeid',
        'reviewlikeid' => 'getReviewlikeid'
    );
  
    
    /**
      * $itemId 
      * @var string
      */
    protected $itemId;
    
    /**
      * $value 
      * @var string
      */
    protected $value;
    
    /**
      * $id 
      * @var double
      */
    protected $id;
    
    /**
      * $profileId 
      * @var double
      */
    protected $profileId;
    
    /**
      * $likeid 
      * @var double
      */
    protected $likeid;
    
    /**
      * $reviewlikeid 
      * @var double
      */
    protected $reviewlikeid;
    

    /**
     * Constructor
     * @param mixed[] $data Associated array of property value initalizing the model
     */
    public function __construct(array $data = null)
    {
        if ($data != null) {
            $this->itemId = $data["itemId"];
            $this->value = $data["value"];
            $this->id = $data["id"];
            $this->profileId = $data["profileId"];
            $this->likeid = $data["likeid"];
            $this->reviewlikeid = $data["reviewlikeid"];
        }
    }
    
    /**
     * Gets itemId
     * @return string
     */
    public function getItemId()
    {
        return $this->itemId;
    }
  
    /**
     * Sets itemId
     * @param string $itemId 
     * @return $this
     */
    public function setItemId($itemId)
    {
        
        $this->itemId = $itemId;
        return $this;
    }
    
    /**
     * Gets value
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }
  
    /**
     * Sets value
     * @param string $value 
     * @return $this
     */
    public function setValue($value)
    {
        
        $this->value = $value;
        return $this;
    }
    
    /**
     * Gets id
     * @return double
     */
    public function getId()
    {
        return $this->id;
    }
  
    /**
     * Sets id
     * @param double $id 
     * @return $this
     */
    public function setId($id)
    {
        
        $this->id = $id;
        return $this;
    }
    
    /**
     * Gets profileId
     * @return double
     */
    public function getProfileId()
    {
        return $this->profileId;
    }
  
    /**
     * Sets profileId
     * @param double $profileId 
     * @return $this
     */
    public function setProfileId($profileId)
    {
        
        $this->profileId = $profileId;
        return $this;
    }
    
    /**
     * Gets likeid
     * @return double
     */
    public function getLikeid()
    {
        return $this->likeid;
    }
  
    /**
     * Sets likeid
     * @param double $likeid 
     * @return $this
     */
    public function setLikeid($likeid)
    {
        
        $this->likeid = $likeid;
        return $this;
    }
    
    /**
     * Gets reviewlikeid
     * @return double
     */
    public function getReviewlikeid()
    {
        return $this->reviewlikeid;
    }
  
    /**
     * Sets reviewlikeid
     * @param double $reviewlikeid 
     * @return $this
     */
    public function setReviewlikeid($reviewlikeid)
    {
        
        $this->reviewlikeid = $reviewlikeid;
        return $this;
    }
    
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset 
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->$offset);
    }
  
    /**
     * Gets offset.
     * @param  integer $offset Offset 
     * @return mixed 
     */
    public function offsetGet($offset)
    {
        return $this->$offset;
    }
  
    /**
     * Sets value based on offset.
     * @param  integer $offset Offset 
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        $this->$offset = $value;
    }
  
    /**
     * Unsets offset.
     * @param  integer $offset Offset 
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->$offset);
    }
  
    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) {
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        } else {
            return json_encode(\DBCDK\CommunityServices\ObjectSerializer::sanitizeForSerialization($this));
        }
    }
}
